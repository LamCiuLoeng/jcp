################################################## 
# JCPenney_x0020_Ticket_x0020_Request_x0020_Web_x0020_Service_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# https://supplier.jcpenney.com/trs/wsvcTktInfo/
##############################

class ns0:
    targetNamespace = "https://supplier.jcpenney.com/trs/wsvcTktInfo/"

    class AuthHeader_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "https://supplier.jcpenney.com/trs/wsvcTktInfo/"
        type = (schema, "AuthHeader")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.AuthHeader_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"sUserID"), aname="_sUserID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sPassword"), aname="_sPassword", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sUserID = None
                    self._sPassword = None
                    return
            Holder.__name__ = "AuthHeader_Holder"
            self.pyclass = Holder

    class GetTktInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetTktInfo"
        schema = "https://supplier.jcpenney.com/trs/wsvcTktInfo/"
        def __init__(self, **kw):
            ns = ns0.GetTktInfo_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"sInRequest"), aname="_sInRequest", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://supplier.jcpenney.com/trs/wsvcTktInfo/","GetTktInfo")
            kw["aname"] = "_GetTktInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sInRequest = None
                    return
            Holder.__name__ = "GetTktInfo_Holder"
            self.pyclass = Holder

    class GetTktInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetTktInfoResponse"
        schema = "https://supplier.jcpenney.com/trs/wsvcTktInfo/"
        def __init__(self, **kw):
            ns = ns0.GetTktInfoResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"GetTktInfoResult"), aname="_GetTktInfoResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("https://supplier.jcpenney.com/trs/wsvcTktInfo/","GetTktInfoResponse")
            kw["aname"] = "_GetTktInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetTktInfoResult = None
                    return
            Holder.__name__ = "GetTktInfoResponse_Holder"
            self.pyclass = Holder

    class AuthHeader_Dec(ElementDeclaration):
        literal = "AuthHeader"
        schema = "https://supplier.jcpenney.com/trs/wsvcTktInfo/"
        def __init__(self, **kw):
            kw["pname"] = ("https://supplier.jcpenney.com/trs/wsvcTktInfo/","AuthHeader")
            kw["aname"] = "_AuthHeader"
            if ns0.AuthHeader_Def not in ns0.AuthHeader_Dec.__bases__:
                bases = list(ns0.AuthHeader_Dec.__bases__)
                bases.insert(0, ns0.AuthHeader_Def)
                ns0.AuthHeader_Dec.__bases__ = tuple(bases)

            ns0.AuthHeader_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "AuthHeader_Dec_Holder"

    class string_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "string"
        schema = "https://supplier.jcpenney.com/trs/wsvcTktInfo/"
        def __init__(self, **kw):
            kw["pname"] = ("https://supplier.jcpenney.com/trs/wsvcTktInfo/","string")
            kw["aname"] = "_string"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_string_immutable_holder"
            ZSI.TC.String.__init__(self, **kw)

# end class ns0 (tns: https://supplier.jcpenney.com/trs/wsvcTktInfo/)
